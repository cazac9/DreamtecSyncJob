// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DreamtecSyncJob.Yttrium
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ZirconiumWebHooks.
    /// </summary>
    public static partial class ZirconiumWebHooksExtensions
    {
            /// <summary>
            /// Will be called when a new case has been created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information about the case.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel CaseCreated(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosCaseCreatedWebHookModel model)
            {
                return Task.Factory.StartNew(s => ((IZirconiumWebHooks)s).CaseCreatedAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will be called when a new case has been created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information about the case.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> CaseCreatedAsync(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosCaseCreatedWebHookModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CaseCreatedWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Will be called when a new case has been Updated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information about the case.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel CaseUpdated(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosCaseUpdatedWebHookModel model)
            {
                return Task.Factory.StartNew(s => ((IZirconiumWebHooks)s).CaseUpdatedAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will be called when a new case has been Updated.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information about the case.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> CaseUpdatedAsync(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosCaseUpdatedWebHookModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CaseUpdatedWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Will be called when a new service has been created on a case.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information about the service.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel CaseServiceCreated(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosCaseServiceCreatedWebHookModel model)
            {
                return Task.Factory.StartNew(s => ((IZirconiumWebHooks)s).CaseServiceCreatedAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will be called when a new service has been created on a case.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information about the service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> CaseServiceCreatedAsync(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosCaseServiceCreatedWebHookModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CaseServiceCreatedWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Will be called when a new service has been Updated on a case.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information about the service.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel CaseServiceUpdated(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosCaseServiceUpdatedWebHookModel model)
            {
                return Task.Factory.StartNew(s => ((IZirconiumWebHooks)s).CaseServiceUpdatedAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will be called when a new service has been Updated on a case.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information about the service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> CaseServiceUpdatedAsync(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosCaseServiceUpdatedWebHookModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CaseServiceUpdatedWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Will be called when a user captured a comment on a case.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information of the comment added and the user who captured it.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel CaseCommentAdded(this IZirconiumWebHooks operations, ResQYttriumWebApiModelsCaseCommentAddedWebHookModel model)
            {
                return Task.Factory.StartNew(s => ((IZirconiumWebHooks)s).CaseCommentAddedAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will be called when a user captured a comment on a case.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information of the comment added and the user who captured it.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> CaseCommentAddedAsync(this IZirconiumWebHooks operations, ResQYttriumWebApiModelsCaseCommentAddedWebHookModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CaseCommentAddedWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Will be called when a user captured a comment on a service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information of the comment added and the user who captured it.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel CaseServiceCommentAdded(this IZirconiumWebHooks operations, ResQYttriumWebApiModelsCaseServiceCommentAddedWebHookModel model)
            {
                return Task.Factory.StartNew(s => ((IZirconiumWebHooks)s).CaseServiceCommentAddedAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will be called when a user captured a comment on a service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information of the comment added and the user who captured it.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> CaseServiceCommentAddedAsync(this IZirconiumWebHooks operations, ResQYttriumWebApiModelsCaseServiceCommentAddedWebHookModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CaseServiceCommentAddedWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Will be called periodically based on subscription per client with updates
            /// of the service provider location and status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information of the service provider, including location, status and
            /// general detail.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel ServiceProviderLocationUpdate(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosServiceProviderLocationUpdateWebHookModel model)
            {
                return Task.Factory.StartNew(s => ((IZirconiumWebHooks)s).ServiceProviderLocationUpdateAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Will be called periodically based on subscription per client with updates
            /// of the service provider location and status.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Information of the service provider, including location, status and
            /// general detail.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> ServiceProviderLocationUpdateAsync(this IZirconiumWebHooks operations, ResQNickelZirconiumCommonWebHookDtosServiceProviderLocationUpdateWebHookModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ServiceProviderLocationUpdateWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
