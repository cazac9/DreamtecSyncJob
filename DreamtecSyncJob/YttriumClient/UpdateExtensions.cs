// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DreamtecSyncJob.Yttrium
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Update.
    /// </summary>
    public static partial class UpdateExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ResQYttriumWebApiModelsResultModel Create(this IUpdate operations, ResQYttriumWebApiModelsServiceProviderUpdatedModel model)
            {
                return Task.Factory.StartNew(s => ((IUpdate)s).CreateAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> CreateAsync(this IUpdate operations, ResQYttriumWebApiModelsServiceProviderUpdatedModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ResQYttriumWebApiModelsResultModel AddCaseComment(this IUpdate operations, ResQYttriumWebApiModelsAddCaseCommentModel model)
            {
                return Task.Factory.StartNew(s => ((IUpdate)s).AddCaseCommentAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> AddCaseCommentAsync(this IUpdate operations, ResQYttriumWebApiModelsAddCaseCommentModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCaseCommentWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ResQYttriumWebApiModelsResultModel AddServiceComment(this IUpdate operations, ResQYttriumWebApiModelsCreateServiceCommentModel model)
            {
                return Task.Factory.StartNew(s => ((IUpdate)s).AddServiceCommentAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> AddServiceCommentAsync(this IUpdate operations, ResQYttriumWebApiModelsCreateServiceCommentModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddServiceCommentWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static ResQYttriumWebApiModelsResultModel FinaliseService(this IUpdate operations, ResQYttriumWebApiModelsFinaliseServiceModel model)
            {
                return Task.Factory.StartNew(s => ((IUpdate)s).FinaliseServiceAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> FinaliseServiceAsync(this IUpdate operations, ResQYttriumWebApiModelsFinaliseServiceModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FinaliseServiceWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
