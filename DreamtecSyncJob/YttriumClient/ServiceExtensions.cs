// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace DreamtecSyncJob.Yttrium
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Service.
    /// </summary>
    public static partial class ServiceExtensions
    {
            /// <summary>
            /// Logs a user comment on a Case Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service and containing the comment detail.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel AddComment(this IService operations, ResQYttriumWebApiModelsCreateServiceCommentModel model)
            {
                return Task.Factory.StartNew(s => ((IService)s).AddCommentAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Logs a user comment on a Case Service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service and containing the comment detail.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> AddCommentAsync(this IService operations, ResQYttriumWebApiModelsCreateServiceCommentModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddCommentWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Requests cancellation of the case service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the service to cancel.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel CancelService(this IService operations, ResQYttriumWebApiModelsCancelServiceModel model)
            {
                return Task.Factory.StartNew(s => ((IService)s).CancelServiceAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Requests cancellation of the case service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the service to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> CancelServiceAsync(this IService operations, ResQYttriumWebApiModelsCancelServiceModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelServiceWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Provide new schedule information for a case service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service to reshcedule as well as the schedule
            /// detail.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel RescheduleService(this IService operations, ResQYttriumWebApiModelsRescheduleServiceModel model)
            {
                return Task.Factory.StartNew(s => ((IService)s).RescheduleServiceAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Provide new schedule information for a case service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service to reshcedule as well as the schedule
            /// detail.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> RescheduleServiceAsync(this IService operations, ResQYttriumWebApiModelsRescheduleServiceModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RescheduleServiceWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the tag(s) of a case service.
            /// Only one group's tags can be set per invocation of this method.  Use
            /// multiple calls to update different tag groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service to update and the list of tags to apply
            /// for a specific tag group.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel UpdateTag(this IService operations, ResQYttriumWebApiModelsUpdateCaseServiceTagModel model)
            {
                return Task.Factory.StartNew(s => ((IService)s).UpdateTagAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the tag(s) of a case service.
            /// Only one group's tags can be set per invocation of this method.  Use
            /// multiple calls to update different tag groups.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service to update and the list of tags to apply
            /// for a specific tag group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> UpdateTagAsync(this IService operations, ResQYttriumWebApiModelsUpdateCaseServiceTagModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTagWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Triggers the automatic dispatch of a service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service to dispatch.
            /// </param>
            public static ResQYttriumWebApiModelsResultModel InitiateAutoDispatch(this IService operations, ResQYttriumWebApiModelsInitiateAutoDispatchModel model)
            {
                return Task.Factory.StartNew(s => ((IService)s).InitiateAutoDispatchAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers the automatic dispatch of a service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service to dispatch.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsResultModel> InitiateAutoDispatchAsync(this IService operations, ResQYttriumWebApiModelsInitiateAutoDispatchModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InitiateAutoDispatchWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submit a rating by a customer or relevant party about a service that was
            /// rendered.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service and providing the rating detail.
            /// </param>
            public static ResQYttriumWebApiModelsSubmitCaseServiceRatingResultModel SubmitRating(this IService operations, ResQYttriumWebApiModelsSubmitRatingModel model)
            {
                return Task.Factory.StartNew(s => ((IService)s).SubmitRatingAsync(model), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submit a rating by a customer or relevant party about a service that was
            /// rendered.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// Model identifying the case service and providing the rating detail.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResQYttriumWebApiModelsSubmitCaseServiceRatingResultModel> SubmitRatingAsync(this IService operations, ResQYttriumWebApiModelsSubmitRatingModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SubmitRatingWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
